/*
 * @lc app=leetcode.cn id=36 lang=cpp
 *
 * [36] 有效的数独
 *
 * https://leetcode-cn.com/problems/valid-sudoku/description/
 *
 * algorithms
 * Medium (56.78%)
 * Likes:    274
 * Dislikes: 0
 * Total Accepted:    57K
 * Total Submissions: 97.5K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * 
 * 
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * 
 * 
 * 
 * 
 * 上图是一个部分填充的有效的数独。
 * 
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 
 * 示例 1:
 * 
 * 输入:
 * [
 * ⁠ ["5","3",".",".","7",".",".",".","."],
 * ⁠ ["6",".",".","1","9","5",".",".","."],
 * ⁠ [".","9","8",".",".",".",".","6","."],
 * ⁠ ["8",".",".",".","6",".",".",".","3"],
 * ⁠ ["4",".",".","8",".","3",".",".","1"],
 * ⁠ ["7",".",".",".","2",".",".",".","6"],
 * ⁠ [".","6",".",".",".",".","2","8","."],
 * ⁠ [".",".",".","4","1","9",".",".","5"],
 * ⁠ [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * 
 * 
 * 示例 2:
 * 
 * 输入:
 * [
 * ["8","3",".",".","7",".",".",".","."],
 * ["6",".",".","1","9","5",".",".","."],
 * [".","9","8",".",".",".",".","6","."],
 * ["8",".",".",".","6",".",".",".","3"],
 * ["4",".",".","8",".","3",".",".","1"],
 * ["7",".",".",".","2",".",".",".","6"],
 * [".","6",".",".",".",".","2","8","."],
 * [".",".",".","4","1","9",".",".","5"],
 * [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * ⁠    但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 
 * 说明:
 * 
 * 
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 * 
 * 
 */

// @lc code=start
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        vector<bool> hash(9,false);
        for(int row = 0; row<9; row++){
            for(int col = 0; col<9; col++){
                if(board[row][col] == '.')  continue;
                if(hash[board[row][col]-'1'])   return false;
                else    hash[board[row][col]-'1'] = true;
            }
            for(int tmp = 0; tmp<9; tmp++){
                hash[tmp] = false;
            }
        }
        for(int row = 0; row<9; row++){
            for(int col = 0; col<9; col++){
                if(board[col][row] == '.')  continue;
                if(hash[board[col][row]-'1'])   return false;
                else    hash[board[col][row]-'1'] = true;
            }
            for(int tmp = 0; tmp<9; tmp++){
                hash[tmp] = false;
            }
        }

        for(int out = 0; out < 9; out += 3){
            for(int in = 0; in<9; in += 3){
                for(int i = out; i < out+3; i++){
                    for(int j = in; j<in+3;j++){
                        //cout <<'('<<i<<','<<j<<')';
                        if(board[i][j] == '.')  continue;
                        if(hash[board[i][j]-'1'])   return false;
                        else    hash[board[i][j]-'1'] = true;
                        
                    }
                    
                }
                for(int tmp = 0; tmp<9; tmp++){
                        hash[tmp] = false;
                    }
                    //cout <<"9 clear"<< endl;
                
            }
            //cout << endl;
            
        }

        return true;
    }
};
// @lc code=end

/* 行检查+列检查+块检查，三个循环 挺慢啊！
504/504 cases passed (24 ms)
Your runtime beats 28.08 % of cpp submissions
Your memory usage beats 58.96 % of cpp submissions (9.6 MB)
*/

//更快的方法：9个行检查，9个列检查，9个块检查hash表
//每一个点对应修正3个hash表，异常直接返回
//用空间换时间